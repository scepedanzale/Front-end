
S9/L2

1.{}  Usa il boilerplate tramite create-react-app per creare la tua React App di base. 

2.{}  Installa bootstrap  e  react-bootstrap nella tua app.

3.{}  Crea un componente MyNav che renderizzerà un componente react-bootstrap per la 
    navigation bar con i seguenti link: Home, About and Browse.Nota: non sappiamo ancora 
    come creare una vera navigazione, quindi per il momento usa "#" come proprietà href per 
    ognuno di essi.

4.{}  Crea un componente MyFooter che renderizzerà un footer per la pagina.

5.{}  Crea un componente Welcome con un Jumbotron e un sottotitolo per il tuo shop.

6.{}  Crea un componente AllTheBooks. Questo componente dovrà leggere un file .json fornito 
    e mostrare le cover dei libri nella pagina (puoi utilizzare una Card di react-bootstrap).


S9/L3

1.{}  Crea un componente SingleBook utilizzando una funzione. Questo componente dovrà essere 
    predisposto per ricevere nelle props un oggetto corrispondente ad un singolo libro, e 
    visualizzerà la sua copertina e il titolo. Usa le Card di react-bootstrap (se vuoi testarlo, 
    l'oggetto del libro può esser preso da uno dei file .json  che hai ricevuto ieri).

2.{}  Crea un componente BookList. Questo componente riceverà dalle prop un array di libri, 
    e li visualizzerà attraverso un .map() ritornando per ogni elemento il componente SingleBook. 
    Successivamente monta BookList dentro il componente App, e forniscigli una lista di libri da
    uno dei file .json come prop. Dovresti ottenere a schermo un risultato simile al componente 
    AllTheBooks: ora però la struttura è molto più modulare e riutilizzabile.

3.  [EXTRA] Crea una funzione getSearchQuery che salvi la stringa di ricerca dentro allo stato 
    del componente BookList e filtri i libri di conseguenza. Il componente BookList dovrà quindi 
    renderizzare a quel punto solo i libri contenenti la stringa cercata come titolo del libro.

4.{}  Converti il tuo componente SingleBook in una classe, e crea il suo stato contenente una 
    proprietà booleana selected.

5.{}  Un click sulla copertina del libro dovrà fare il toggle della proprietà selected. 
    Se la proprietà selected sarà true, il SingleBook dovrà ricevere dello stile che rifletta il 
    cambio di stato, visivamente (potresti ad esempio utilizzare un bordo rosso).


ENDPOINT: https://striveschool-api.herokuapp.com/api/comments/
Token: https://strive.school/studentlogin
    Per ricevere i commenti di un singolo libro/film alla volta -> pecificare l'id/asin della risorsa 
    nel tuo URL: https://striveschool-api.herokuapp.com/api/comments/:elementId

S9/L4

1.{}  Aggiungi un componente CommentArea alla fine di SingleBook. Quando l'utente cliccherà su un 
    SingleBook (quindi quando la proprietà selected nel suo stato diventa true), i commenti dovranno 
    apparire (suggerimento: short-circuit operator!).

2.{}  CommentArea dovrà fare il fetch delle recensioni per il libro selezionato, e salvare i 
    commenti nel proprio stato. Conterrà inoltre due sotto-componenti: CommentsList and AddComment.

3.{}  CommentsList mostrerà le recensioni del libro in un elenco; l'array di recensioni gli verrà 
    passato come prop dal componente CommentArea. La singola recensione verrà visualizzata utilizzando
    un altro componente, chiamato SingleComment.

4.  [EXTRA] AddComment conterrà un form per aggiungere il testo della recensione e il voto 
    (da 1 o a 5). Questo componente dovrà permettere all'utente di fare la POST del nuovo commento 
    sul libro selezionato.

5.{}  [EXTRA] Aggiungi vicino ogni commento un bottone per cancellarlo (DELETE). Dovrà creare una 
    richiesta verso https://striveschool-api.herokuapp.com/api/comments/:commentId

6.{}  [EXTRA] Crea un componente Loading. Questo apparirà nella pagina quando la richiesta è in 
    fase di elaborazione, ma non ancora risolta.

7.{}  [EXTRA] Crea un componente Error. Se qualcosa andrà male con una network request, dovrà 
    apparire un messaggio di errore.


S10/L1

1.  Fai il refactor della struttura della tua pagina principale: dovranno esserci due colonne. 
    Una a sinistra contenente la griglia con i libri e una sulla destra con il componente CommentArea.
    Dovrai quindi estrarre il componente CommentArea e portarlo fuori da SingleBook. 
    Entrambi dovranno essere sempre visibili. Se inizialmente nessun libro è selezionato, il 
    CommentArea non deve mostrare alcun contenuto oppure un messaggio che chieda all'utente di 
    selezionare un libro.

2.  Quando un libro sulla sinistra viene selezionato, il suo codice asin dovrà essere salvato 
    nello stato del componente principale; in questo modo potrà essere passato dentro al CommentArea 
    via prop. Quando CommentArea rileva un nuovo valore di asin, con il metodo componentDidUpdate(), 
    dovrà effettuare un fetch per ricevere i commenti che verranno poi visualizzati.

3.  [EXTRA] Il click sul componente SingleBook dovrà rappresentare un singolo libro selezionato 
    alla volta per essere coerente con i commenti visualizzati sulla destra. Sarà quindi necessario 
    modificare la funzionalità che permette al bordo della Card di diventare rosso, non più 
    utilizzando uno stato interno, ma andando a comparare il valore dell'asin del libro con il suo 
    asin personale. Se corrisponde, solo in quel caso il bordo diventerà rosso.


S10/L2
(Hooks)

L'obiettivo è di convertire ogni componente a classe in un componente a funzione e usare gli 
hooks per replicare le funzionalità presenti nelle classi con gli hook appropriati corrispondenti.

-   Usa useState() e useEffect() per replicare le funzionalità di un Class Component.
-   Ricorda che useEffect() può essere usato sia come componentDidMount sia come 
    componentDidUpdate, in base a ciò che metterai nell'array di dipendenze.
-   Cerca di mantenere i valori dei campi input nel componente AddComment in un singolo oggetto, 
    usando un unico hook useState() per l'intero form.